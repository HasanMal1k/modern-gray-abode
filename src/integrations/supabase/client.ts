
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qljnuokdtamjuyvwtiob.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsam51b2tkdGFtanV5dnd0aW9iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyMjA3NTcsImV4cCI6MjA1OTc5Njc1N30.SLTBUyw6fftqYE2lGBjpCzy2tJKr0VPOwFntmWxez-U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Adding type assertion to fix TypeScript errors
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define custom types for our database tables to use in components
export type TablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert'];
export type TablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update'];
export type TablesRow<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];

// Define tables for our database schema
export interface CustomDatabase {
  public: {
    Tables: {
      admin_users: {
        Row: {
          id: string;
          email: string;
          password_hash: string;
          created_at: string;
        };
        Insert: {
          id?: string;
          email: string;
          password_hash: string;
          created_at?: string;
        };
        Update: {
          id?: string;
          email?: string;
          password_hash?: string;
          created_at?: string;
        };
      };
      properties: {
        Row: {
          id: string;
          title: string;
          subtitle?: string;
          location: string;
          price: string;
          price_numeric: number;
          bedrooms: number;
          bathrooms: number;
          area?: number;
          type?: string;
          category: string;
          description?: string;
          featured: boolean;
          power_supply?: string;
          style?: string;
          video_url?: string;
          created_at: string;
          updated_at: string;
        };
      };
      property_images: {
        Row: {
          id: string;
          property_id: string;
          image_url: string;
          is_primary: boolean;
          display_order: number;
          created_at: string;
        };
      };
      property_features: {
        Row: {
          id: string;
          property_id: string;
          feature_name: string;
          created_at: string;
        };
      };
      property_services: {
        Row: {
          id: string;
          property_id: string;
          service_name: string;
          created_at: string;
        };
      };
      property_highlights: {
        Row: {
          id: string;
          property_id: string;
          highlight_text: string;
          created_at: string;
        };
      };
      blog_posts: {
        Row: {
          id: string;
          title: string;
          slug: string;
          content: string;
          excerpt?: string;
          featured_image?: string;
          published: boolean;
          author?: string;
          published_at?: string;
          created_at: string;
          updated_at: string;
        };
      };
    };
  };
}
